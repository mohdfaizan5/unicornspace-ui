export const Features5Code = '"use client";\r\nimport Link from "next/link";\r\nimport { motion, useMotionTemplate, useMotionValue } from "framer-motion";\r\nimport { useId } from "react";\r\n\r\ninterface GridPatternProps extends React.SVGProps<SVGSVGElement> {\r\n  width: number;\r\n  height: number;\r\n  x: string | number;\r\n  y?: number;\r\n  squares?: [number, number][];\r\n}\r\n\r\nfunction GridPattern({\r\n  width,\r\n  height,\r\n  x,\r\n  y = 0,\r\n  squares = [],\r\n  ...props\r\n}: GridPatternProps) {\r\n  const patternId = useId();\r\n\r\n  return (\r\n    <svg aria-hidden="true" {...props}>\r\n      <defs>\r\n        <pattern id={patternId} width={width} height={height} patternUnits="userSpaceOnUse" x={x} y={y}>\r\n          <path d={`M.5 ${height}V.5H${width}`} fill="none" />\r\n        </pattern>\r\n      </defs>\r\n      <rect width="100%" height="100%" strokeWidth={0} fill={`url(#${patternId})`} />\r\n      {squares.length > 0 && (\r\n        <svg x={x} y={y} className="overflow-visible">\r\n          {squares.map(([squareX, squareY]) => (\r\n            <rect\r\n              key={`${squareX}-${squareY}`}\r\n              width={width + 1}\r\n              height={height + 1}\r\n              x={squareX * width}\r\n              y={squareY * height}\r\n              strokeWidth={0}\r\n            />\r\n          ))}\r\n        </svg>\r\n      )}\r\n    </svg>\r\n  );\r\n}\r\n\r\ninterface Resource {\r\n  href: string;\r\n  name: string;\r\n  description: string;\r\n  icon: string;\r\n  pattern: Omit<GridPatternProps, "width" | "height" | "x">;\r\n}\r\n\r\nconst resources: Resource[] = [\r\n  {\r\n    href: "/contacts",\r\n    name: "Contacts",\r\n    description: "Learn about the contact model and how to create, retrieve, update, delete, and list contacts.",\r\n    icon: "üåê",\r\n    pattern: { y: 16, squares: [[0, 1], [1, 3]] },\r\n  },\r\n  {\r\n    href: "/conversations",\r\n    name: "Conversations",\r\n    description: "Learn about the conversation model and how to create, retrieve, update, delete, and list conversations.",\r\n    icon: "üåê",\r\n    pattern: { y: -6, squares: [[-1, 2], [1, 3]] },\r\n  },\r\n  {\r\n    href: "/messages",\r\n    name: "Messages",\r\n    description: "Learn about the message model and how to create, retrieve, update, delete, and list messages.",\r\n    icon: "üåê",\r\n    pattern: { y: 32, squares: [[0, 2], [1, 4]] },\r\n  },\r\n  {\r\n    href: "/groups",\r\n    name: "Groups",\r\n    description: "Learn about the group model and how to create, retrieve, update, delete, and list groups.",\r\n    icon: "üåê",\r\n    pattern: { y: 22, squares: [[0, 1]] },\r\n  },\r\n];\r\n\r\ninterface ResourcePatternProps {\r\n  width: number;\r\n  height: number;\r\n  x: string | number;\r\n  mouseX: any;\r\n  mouseY: any;\r\n  pattern: Omit<GridPatternProps, "width" | "height" | "x">;\r\n}\r\n\r\nfunction ResourcePattern({\r\n  width,\r\n  height,\r\n  x,\r\n  mouseX,\r\n  mouseY,\r\n  pattern,\r\n}: ResourcePatternProps) {\r\n  const maskImage = useMotionTemplate`radial-gradient(180px at ${mouseX}px ${mouseY}px, white, transparent)`;\r\n  const style = { maskImage, WebkitMaskImage: maskImage };\r\n\r\n  return (\r\n    <div className="pointer-events-none">\r\n      <div className="absolute inset-0 rounded-2xl transition duration-300 group-hover:opacity-50">\r\n        <GridPattern\r\n          width={width}\r\n          height={height}\r\n          x={x}\r\n          {...pattern}\r\n          className="absolute inset-x-0 inset-y-[-30%] h-[160%] w-full skew-y-[-18deg] fill-black/[0.02] stroke-black/5 dark:fill-white/1 dark:stroke-white/2.5"\r\n        />\r\n      </div>\r\n      <motion.div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-[#D7EDEA] to-[#F4FBDF] opacity-0 transition duration-300 group-hover:opacity-100 dark:from-[#202D2E] dark:to-[#303428]" style={style} />\r\n      <motion.div className="absolute inset-0 rounded-2xl opacity-0 mix-blend-overlay transition duration-300 group-hover:opacity-100" style={style}>\r\n        <GridPattern\r\n          width={width}\r\n          height={height}\r\n          x={x}\r\n          {...pattern}\r\n          className="absolute inset-x-0 inset-y-[-30%] h-[160%] w-full skew-y-[-18deg] fill-black/50 stroke-black/70 dark:fill-white/2.5 dark:stroke-white/10"\r\n        />\r\n      </motion.div>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface ResourceProps {\r\n  resource: Resource;\r\n}\r\n\r\nfunction Resource({ resource }: ResourceProps) {\r\n  const mouseX = useMotionValue(0);\r\n  const mouseY = useMotionValue(0);\r\n\r\n  function onMouseMove({ currentTarget, clientX, clientY }: React.MouseEvent) {\r\n    const { left, top } = currentTarget.getBoundingClientRect();\r\n    mouseX.set(clientX - left);\r\n    mouseY.set(clientY - top);\r\n  }\r\n\r\n  return (\r\n    <div onMouseMove={onMouseMove} className="group relative flex rounded-2xl transition-shadow hover:shadow-md hover:shadow-zinc-900/5 dark:bg-white/2.5 dark:hover:shadow-black/5">\r\n      <ResourcePattern\r\n        width={72}\r\n        height={56}\r\n        x="50%"\r\n        pattern={resource.pattern}\r\n        mouseX={mouseX}\r\n        mouseY={mouseY}\r\n      />\r\n      <div className="absolute inset-0 rounded-2xl ring-1 ring-inset ring-zinc-900/7.5 group-hover:ring-zinc-900/10 dark:ring-white/10 dark:group-hover:ring-white/20" />\r\n      <div className="relative rounded-2xl px-4 pt-16 pb-4">\r\n        <h3 className="mt-4 text-sm font-semibold leading-7 ">\r\n          <Link href={resource.href}>{resource.name}</Link>\r\n        </h3>\r\n        <p className="mt-1 text-sm text-zinc-600 dark:text-zinc-400">\r\n          {resource.description}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Features5() {\r\n  return (\r\n    <div className="my-16 xl:max-w-none">\r\n      <h2 className="text-3xl" id="resources">Resources</h2>\r\n      <div className="not-prose mt-4 grid grid-cols-1 gap-8 border-t border-zinc-900/5 pt-10 dark:border-white/5 sm:grid-cols-2 xl:grid-cols-4">\r\n        {resources.map((resource) => (\r\n          <Resource key={resource.href} resource={resource} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n';
