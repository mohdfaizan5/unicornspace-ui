export const Card1Code = 'import React from \'react\'\r\n\r\nconst card1 = () => {\r\n  return (\r\n    <div>card1</div>\r\n  )\r\n}\r\n\r\nexport default card1\r\n// // imports\r\n// import Link from "next/link";\r\n// import clsx from "clsx";\r\n// import { ReactNode, ElementType, ComponentPropsWithoutRef } from "react";\r\n\r\n// // TODO: bad code, need to refactor\r\n\r\n\r\n// // Types for Polymorphic Components\r\n// type AsProp<C extends ElementType> = { as?: C };\r\n// type PolymorphicProps<C extends ElementType, Props = {}> = Props &\r\n//   AsProp<C> &\r\n//   Omit<ComponentPropsWithoutRef<C>, keyof Props | "as">;\r\n\r\n// // Icon Component\r\n\r\n// // Card Component\r\n// type CardProps<C extends ElementType = "div"> = {\r\n//   hoverEffect?: boolean;\r\n//   className?: string;\r\n//   children: ReactNode;\r\n// };\r\n\r\n// export function Card<C extends ElementType = "div">({\r\n//   as,\r\n//   hoverEffect = true,\r\n//   className,\r\n//   children,\r\n//   ...props\r\n// }: PolymorphicProps<C, CardProps<C>>) {\r\n//   const Component = as || "div";\r\n//   return (\r\n//     <Component\r\n//       className={clsx(\r\n//         "relative flex flex-col items-start",\r\n//         hoverEffect && "group",\r\n//         className\r\n//       )}\r\n//       {...props}\r\n//     >\r\n//       {children}\r\n//     </Component>\r\n//   );\r\n// }\r\n\r\n// // Card.Link\r\n// Card.Link = function CardLink({\r\n//   href,\r\n//   children,\r\n//   className,\r\n//   ...props\r\n// }: {\r\n//   href: string;\r\n//   children: ReactNode;\r\n//   className?: string;\r\n// }) {\r\n//   return (\r\n//     <Link href={href} {...props}>\r\n//       <div\r\n//         className={clsx(\r\n//           "absolute inset-0 scale-95 opacity-0 transition group-hover:scale-100 group-hover:opacity-100",\r\n//           "z-0"\r\n//         )}\r\n//       />\r\n//       <span className="relative z-10">{children}</span>\r\n//     </Link>\r\n//   );\r\n// };\r\n\r\n// // Card.Title\r\n// Card.Title = function CardTitle<C extends ElementType = "h2">({\r\n//   as,\r\n//   href,\r\n//   children,\r\n//   className,\r\n//   ...props\r\n// }: PolymorphicProps<C, { href?: string; children: ReactNode }>) {\r\n//   const Component = as || "h2";\r\n//   return (\r\n//     <Component\r\n//       className={clsx(\r\n//         "text-base font-semibold text-zinc-800 dark:text-zinc-100",\r\n//         className\r\n//       )}\r\n//       {...props}\r\n//     >\r\n//       {href ? <Card.Link href={href}>{children}</Card.Link> : children}\r\n//     </Component>\r\n//   );\r\n// };\r\n\r\n// // Card.Description\r\n// Card.Description = function ({\r\n//   children,\r\n//   className,\r\n// }: {\r\n//   children: ReactNode;\r\n//   className?: string;\r\n// }) {\r\n//   return (\r\n//     <p\r\n//       className={clsx(\r\n//         "mt-2 text-sm text-zinc-600 dark:text-zinc-400",\r\n//         className\r\n//       )}\r\n//     >\r\n//       {children}\r\n//     </p>\r\n//   );\r\n// };\r\n\r\n// // Card.Cta\r\n// Card.Cta = function ({\r\n//   children,\r\n//   className,\r\n// }: {\r\n//   children: ReactNode;\r\n//   className?: string;\r\n// }) {\r\n//   return (\r\n//     <div\r\n//       className={clsx(\r\n//         "mt-4 flex items-center text-sm font-medium text-teal-500",\r\n//         className\r\n//       )}\r\n//     >\r\n//       {children}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// // Card.Eyebrow\r\n// Card.Eyebrow = function <C extends ElementType = "p">({\r\n//   as,\r\n//   decorate = false,\r\n//   children,\r\n//   className,\r\n//   ...props\r\n// }: PolymorphicProps<C, { decorate?: boolean; children: ReactNode }>) {\r\n//   return (\r\n//     <div\r\n//       className={clsx(\r\n//         "order-first mb-3 flex items-center text-sm text-zinc-400 dark:text-zinc-500 ",\r\n//         decorate && "pl-3.5 relative",\r\n//         className\r\n//       )}\r\n//       {...props}\r\n//     >\r\n//       {decorate && (\r\n//         <span\r\n//           className="absolute inset-y-0 left-0 flex items-center"\r\n//           aria-hidden="true"\r\n//         >\r\n//           <span className="h-4 w-0.5 bg-zinc-200 dark:bg-zinc-500 rounded-full" />\r\n//         </span>\r\n//       )}\r\n//       {children}\r\n//     </div>\r\n//   );\r\n// };\r\n';
