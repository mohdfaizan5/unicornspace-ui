export const Header2Code = 'import Link, { LinkProps } from "next/link";\r\nimport clsx from "clsx";\r\nimport { ReactNode, ElementType, ComponentPropsWithoutRef } from "react";\r\n\r\n// Utility type to allow custom `as` prop\r\ntype AsProp<C extends ElementType> = {\r\n  as?: C;\r\n};\r\n\r\n// Generic props for any polymorphic component with custom props like hoverEffect\r\ntype PolymorphicComponentProps<C extends ElementType, Props = {}> = Props &\r\n  AsProp<C> &\r\n  Omit<ComponentPropsWithoutRef<C>, keyof Props | "as">;\r\n\r\n// Chevron Icon Component\r\nfunction ChevronRightIcon(props: ComponentPropsWithoutRef<"svg">) {\r\n  return (\r\n    <svg viewBox="0 0 16 16" fill="none" aria-hidden="true" {...props}>\r\n      <path\r\n        d="M6.75 5.75 9.25 8l-2.5 2.25"\r\n        strokeWidth="1.5"\r\n        strokeLinecap="round"\r\n        strokeLinejoin="round"\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n\r\n// Main Card Component\r\ninterface CardProps<C extends ElementType = "div"> {\r\n  hoverEffect?: boolean;\r\n  className?: string;\r\n  children: ReactNode;\r\n}\r\n\r\nexport function Card<C extends ElementType = "div">({\r\n  as,\r\n  className,\r\n  hoverEffect = true,\r\n  children,\r\n  ...props\r\n}: PolymorphicComponentProps<C, CardProps<C>>) {\r\n  const Component = as || "div";\r\n  return (\r\n    <Component\r\n      className={clsx(\r\n        "relative flex flex-col items-start",\r\n        hoverEffect && "group",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </Component>\r\n  );\r\n}\r\n\r\n// Card Link Component\r\ntype CardLinkProps = LinkProps & { children: ReactNode; className?: string };\r\n\r\nCard.Link = function CardLink({\r\n  href,\r\n  children,\r\n  className,\r\n  ...props\r\n}: CardLinkProps) {\r\n  return (\r\n    <>\r\n      <div\r\n        className={clsx(\r\n          "absolute -inset-y-6 -inset-x-4 scale-95 opacity-0 transition",\r\n          "group-hover:scale-100 group-hover:opacity-100 sm:-inset-x-6 sm:rounded-2xl z-0",\r\n          className\r\n        )}\r\n      />\r\n      <Link href={href} {...props}>\r\n        <span className="absolute -inset-y-6 -inset-x-4 sm:-inset-x-6 sm:rounded-2xl z-20" />\r\n        <span className="relative z-10">{children}</span>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\n// Card Title Component\r\ntype CardTitleProps<C extends ElementType> = PolymorphicComponentProps<\r\n  C,\r\n  {\r\n    href?: string;\r\n    children: ReactNode;\r\n  }\r\n>;\r\n\r\nCard.Title = function CardTitle<C extends ElementType = "h2">({\r\n  as,\r\n  href,\r\n  children,\r\n  className,\r\n  ...props\r\n}: CardTitleProps<C>) {\r\n  const Component = as || "h2";\r\n  return (\r\n    <Component\r\n      className={clsx(\r\n        "text-base font-semibold tracking-tight text-zinc-800 dark:text-zinc-100",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {href ? <Card.Link href={href}>{children}</Card.Link> : children}\r\n    </Component>\r\n  );\r\n};\r\n\r\n// Card Description Component\r\ntype CardDescriptionProps = { children: ReactNode; className?: string };\r\n\r\nCard.Description = function CardDescription({\r\n  children,\r\n  className,\r\n}: CardDescriptionProps) {\r\n  return (\r\n    <p\r\n      className={clsx(\r\n        "mt-2 text-sm text-zinc-600 dark:text-zinc-400",\r\n        className\r\n      )}\r\n    >\r\n      {children}\r\n    </p>\r\n  );\r\n};\r\n\r\n// Card CTA Component\r\ntype CardCtaProps = { children: ReactNode; className?: string };\r\n\r\nCard.Cta = function CardCta({ children, className }: CardCtaProps) {\r\n  return (\r\n    <div\r\n      aria-hidden="true"\r\n      className={clsx(\r\n        "mt-4 flex items-center text-sm font-medium text-teal-500",\r\n        className\r\n      )}\r\n    >\r\n      {children}\r\n      <ChevronRightIcon className="ml-1 h-4 w-4 stroke-current" />\r\n    </div>\r\n  );\r\n};\r\n\r\n// Card Eyebrow Component\r\ntype CardEyebrowProps<C extends ElementType> = PolymorphicComponentProps<\r\n  C,\r\n  {\r\n    decorate?: boolean;\r\n    children: ReactNode;\r\n  }\r\n>;\r\n\r\nCard.Eyebrow = function CardEyebrow<C extends ElementType = "p">({\r\n  as,\r\n  decorate = false,\r\n  children,\r\n  className,\r\n  ...props\r\n}: CardEyebrowProps<C>) {\r\n  const Component = as || "p";\r\n  return (\r\n    <Component\r\n      className={clsx(\r\n        "order-first mb-3 flex items-center text-sm text-zinc-400 dark:text-zinc-500",\r\n        decorate && "pl-3.5",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {decorate && (\r\n        <span\r\n          className="absolute inset-y-0 left-0 flex items-center"\r\n          aria-hidden="true"\r\n        >\r\n          <span className="h-4 w-0.5 rounded-full bg-zinc-200 dark:bg-zinc-500" />\r\n        </span>\r\n      )}\r\n      {children}\r\n    </Component>\r\n  );\r\n};\r\n';
